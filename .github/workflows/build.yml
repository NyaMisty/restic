# General CI Template for various situation
# **** Review All "XXX" Before Use ****
# Author: Misty

name: Github CI

on:
  push:
  release:
    types:
    - created
  workflow_dispatch:
    inputs:
      debug_enabled:
        description: 'Run the build with tmate debugging enabled (https://github.com/marketplace/actions/debugging-with-tmate)'
        required: false
        default: 'false'
  repository_dispatch:
  #schedule:
  #  - cron: "0 */4 * * *" # min hour day week year


jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          submodules: recursive
      - name: Generate timestamp
        id: timestamp # output: value
        run: |
          TIMESTAMP="$(date +"%Y%m%d")"
          echo "Timestamp: ${TIMESTAMP}"
          echo "::set-output name=value::${TIMESTAMP}"
      - name: Get tag
        if: ${{ startsWith(github.ref, 'refs/tags/') }}
        id: tag # output: tag
        uses: dawidd6/action-get-tag@v1
      - name: Get Previous tag
        id: previoustag # output: tag
        run: |
          if [[ ! -z $(gh release list) ]]; then
            lastTag=$(gh release view --json tagName --jq .tagName)
            echo "::set-output name=tag::${lastTag}"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      ### XXX: Auto update submodule ref, enable this if needed
      - name: Update submodules
        run: |
          git submodule update --init --recursive
          git submodule update --remote      

      ### XXX: Keep alive cron-type workflows
      - uses: NyaMisty/keepalive-workflow@master
      

      ##########################################################
      ###
      ### XXX: Pre-build steps here (checking, debugging)
      ###
      ##########################################################
        
      # Enable tmate debugging of manually-triggered workflows if the input option was provided
      - name: Setup tmate session
        uses: mxschmitt/action-tmate@v3
        if: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.debug_enabled }}
        env:
          SECRETS_CONTEXT: ${{ toJson(secrets) }}
      

      ##########################################################
      ###
      ### XXX: Main building steps here
      ###
      ##########################################################
    
      - name: Restic Build
        run: |
          mkdir -p output
          chmod -R 777 .
          sudo chown -R 1000:1000 .
          VER=${{ steps.tag.outputs.tag }}
          if [ -z $VER ]; then
            VER=$(cat VERSION)
            VER="${VER##v}"
          fi
          echo "Using version: $VER"
          docker run --rm --volume "$PWD:/restic" --volume "$PWD/output:/output"     restic/builder     go run helpers/build-release-binaries/main.go --version "$VER"
      
      #######################################################
      ###
      ### XXX: Artifact Upload
      ###
      ##########################################################
      
      # XXX: Select one debug artifact uploading
      # Upload action artifact as-is
      - name: Upload to GitHub Actions artifact
        uses: NyaMisty/upload-artifact-as-is@master
        with:
          path: output/*
      
      # XXX: Select one release artifact uploading
      # Release to Github, WITHOUT TAG
      # Release to Github, WITH TAG
      - name: Upload to Existing Release
        uses: softprops/action-gh-release@v1
        if: ${{ startsWith(github.ref, 'refs/tags/') }}
        with:
          files: output/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
    #   - name: Create New Release and Upload
    #     if: ${{ !startsWith(github.ref, 'refs/tags/') }}
    #     uses: ncipollo/release-action@v1
    #     with:
    #       artifacts: "output/*"
    #       name: "${{ format('LastBuild: {0} commit {1}', steps.timestamp.outputs.value, github.sha) }}"
    #       tag: "test-release"
    #       commit: ${{ github.sha }}
    #       #prerelease: true
    #       allowUpdates: true

    #       # XXX: edit this to false & true if you want to preserve original artifact
    #       removeArtifacts: true
    #       replacesArtifacts: false
    #       artifactErrorsFailBuild: true
    #       token: ${{ secrets.GITHUB_TOKEN }}